/* Longest Valid Parentheses
 * Approach: stack and dynamic programming
 * https://leetcode.com/problems/longest-valid-parentheses
*/

class Solution {
public:   
    int longestValidParentheses(string s) {
        const size_t size = s.size();
        if (size < 2) {
            return 0;
        }
        deque<int> stack; // records index of last bracket
        stack.push_back(-1);
        int max_count = 0;
        for (int i=0; i<size; ++i) {
            if (s[i] == '(') { // see ( pop it on
                stack.push_back(i);
            } else { // see ) pop back of stack off
                stack.pop_back();
                if (stack.empty()) {
                  // unfinished brackets, record this as the last seen
                    stack.push_back(i);
                } else {
                    // record distance between this and it's earlier (
                    max_count = max(max_count, i - stack.back());
                }
            }
        
        }
        return max_count;
    }
};
